use std::collections::HashMap;
use strum_macros::Display;

#[derive(Debug, Clone, Copy, Eq, PartialEq, Hash, Display)]
pub enum IPTCTags {
    Null,
    ObjectTypeReference,
    ObjectAttributeReference,
    ObjectName,
    EditStatus,
    EditorialUpdate,
    Urgency,
    SubjectReference,
    Category,
    SupplementalCategories,
    FixtureId,
    Keywords,
    ContentLocationCode,
    ContentLocationName,
    ReleaseDate,
    ReleaseTime,
    ExpirationDate,
    ExpirationTime,
    SpecialInstructions,
    ActionAdvised,
    ReferenceService,
    ReferenceDate,
    ReferenceNumber,
    DateCreated,
    TimeCreated,
    DigitalDateCreated,
    DigitalTimeCreated,
    OriginatingProgram,
    ProgramVersion,
    ObjectCycle,
    ByLine,
    ByLineTitle,
    City,
    SubLocation,
    ProvinceOrState,
    CountryOrPrimaryLocationCode,
    CountryOrPrimaryLocationName,
    OriginalTransmissionReference,
    Headline,
    Credit,
    Source,
    CopyrightNotice,
    Contact,
    Caption,
    LocalCaption,
    CaptionWriter,
    RasterizedCaption,
    ImageType,
    ImageOrientation,
    LanguageIdentifier,
    AudioType,
    AudioSamplingRate,
    AudioSamplingResolution,
    AudioDuration,
    AudioOutcue,
    JobId,
    MasterDocumentId,
    ShortDocumentId,
    UniqueDocumentId,
    OwnerId,
    ObjectPreviewFileFormat,
    ObjectPreviewFileFormatVersion,
    ObjectPreviewData,
}

pub struct TagsMap {
    map: HashMap<u32, (IPTCTags, bool)>,
}

impl TagsMap {
    pub fn new() -> Self {
        let map: HashMap<u32, (IPTCTags, bool)> = [
            (3, (IPTCTags::ObjectTypeReference, false)),
            (4, (IPTCTags::ObjectAttributeReference, false)),
            (5, (IPTCTags::ObjectName, false)),
            (7, (IPTCTags::EditStatus, false)),
            (8, (IPTCTags::EditorialUpdate, false)),
            (10, (IPTCTags::Urgency, false)),
            (12, (IPTCTags::SubjectReference, false)),
            (15, (IPTCTags::Category, false)),
            (20, (IPTCTags::SupplementalCategories, true)),
            (22, (IPTCTags::FixtureId, true)),
            (25, (IPTCTags::Keywords, true)),
            (26, (IPTCTags::ContentLocationCode, true)),
            (27, (IPTCTags::ContentLocationName, true)),
            (30, (IPTCTags::ReleaseDate, false)),
            (35, (IPTCTags::ReleaseTime, false)),
            (37, (IPTCTags::ExpirationDate, false)),
            (38, (IPTCTags::ExpirationTime, false)),
            (40, (IPTCTags::SpecialInstructions, false)),
            (42, (IPTCTags::ActionAdvised, false)),
            (45, (IPTCTags::ReferenceService, true)),
            (47, (IPTCTags::ReferenceDate, true)),
            (50, (IPTCTags::ReferenceNumber, true)),
            (55, (IPTCTags::DateCreated, false)),
            (60, (IPTCTags::TimeCreated, false)),
            (62, (IPTCTags::DigitalDateCreated, false)),
            (63, (IPTCTags::DigitalTimeCreated, false)),
            (65, (IPTCTags::OriginatingProgram, false)),
            (70, (IPTCTags::ProgramVersion, false)),
            (75, (IPTCTags::ObjectCycle, false)),
            (80, (IPTCTags::ByLine, true)),
            (85, (IPTCTags::ByLineTitle, true)),
            (90, (IPTCTags::City, false)),
            (92, (IPTCTags::SubLocation, false)),
            (95, (IPTCTags::ProvinceOrState, false)),
            (100, (IPTCTags::CountryOrPrimaryLocationCode, false)),
            (101, (IPTCTags::CountryOrPrimaryLocationName, false)),
            (103, (IPTCTags::OriginalTransmissionReference, false)),
            (105, (IPTCTags::Headline, false)),
            (110, (IPTCTags::Credit, false)),
            (115, (IPTCTags::Source, false)),
            (116, (IPTCTags::CopyrightNotice, false)),
            (118, (IPTCTags::Contact, false)),
            (120, (IPTCTags::Caption, false)),
            (121, (IPTCTags::LocalCaption, false)),
            (122, (IPTCTags::CaptionWriter, true)),
            (125, (IPTCTags::RasterizedCaption, false)),
            (130, (IPTCTags::ImageType, false)),
            (131, (IPTCTags::ImageOrientation, false)),
            (135, (IPTCTags::LanguageIdentifier, false)),
            (150, (IPTCTags::AudioType, false)),
            (151, (IPTCTags::AudioSamplingRate, false)),
            (152, (IPTCTags::AudioSamplingResolution, false)),
            (153, (IPTCTags::AudioDuration, false)),
            (154, (IPTCTags::AudioOutcue, false)),
            (184, (IPTCTags::JobId, false)),
            (185, (IPTCTags::MasterDocumentId, false)),
            (186, (IPTCTags::ShortDocumentId, false)),
            (187, (IPTCTags::UniqueDocumentId, false)),
            (188, (IPTCTags::OwnerId, false)),
            (200, (IPTCTags::ObjectPreviewFileFormat, false)),
            (201, (IPTCTags::ObjectPreviewFileFormatVersion, false)),
            (202, (IPTCTags::ObjectPreviewData, false)),
        ]
        .into_iter()
        .collect();

        TagsMap { map }
    }

    pub fn get(&self, tag: u32) -> Option<(IPTCTags, bool)> {
        self.map.get(&tag).copied()
    }
}
