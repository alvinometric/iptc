use std::collections::HashMap;
use strum_macros::Display;

#[derive(Debug, Clone, Copy, Eq, PartialEq, Hash, Display)]
pub enum IPTCTags {
    Null,
    ObjectTypeReference,
    ObjectAttributeReference,
    ObjectName,
    EditStatus,
    EditorialUpdate,
    Urgency,
    SubjectReference,
    Category,
    SupplementalCategories,
    FixtureId,
    Keywords,
    ContentLocationCode,
    ContentLocationName,
    ReleaseDate,
    ReleaseTime,
    ExpirationDate,
    ExpirationTime,
    SpecialInstructions,
    ActionAdvised,
    ReferenceService,
    ReferenceDate,
    ReferenceNumber,
    DateCreated,
    TimeCreated,
    DigitalDateCreated,
    DigitalTimeCreated,
    OriginatingProgram,
    ProgramVersion,
    ObjectCycle,
    ByLine,
    ByLineTitle,
    City,
    SubLocation,
    ProvinceOrState,
    CountryOrPrimaryLocationCode,
    CountryOrPrimaryLocationName,
    OriginalTransmissionReference,
    Headline,
    Credit,
    Source,
    CopyrightNotice,
    Contact,
    Caption,
    LocalCaption,
    CaptionWriter,
    RasterizedCaption,
    ImageType,
    ImageOrientation,
    LanguageIdentifier,
    AudioType,
    AudioSamplingRate,
    AudioSamplingResolution,
    AudioDuration,
    AudioOutcue,
    JobId,
    MasterDocumentId,
    ShortDocumentId,
    UniqueDocumentId,
    OwnerId,
    ObjectPreviewFileFormat,
    ObjectPreviewFileFormatVersion,
    ObjectPreviewData,
    ApplicationRecordVersion,
}

pub struct TagsMap {
    map: HashMap<u32, (IPTCTags, bool)>,
}

struct TagBlock {
    name: IPTCTags,
    get_value: fn(&[u8]) -> String,
    repeatable: bool,
}

impl TagsMap {
    pub fn new() -> Self {
        let map: HashMap<u32, (IPTCTags, bool)> = [
            (0x020000, (IPTCTags::ApplicationRecordVersion, false)),
            (0x020003, (IPTCTags::ObjectTypeReference, false)),
            (0x020004, (IPTCTags::ObjectAttributeReference, false)),
            (0x020005, (IPTCTags::ObjectName, false)),
            (0x020007, (IPTCTags::EditStatus, false)),
            (0x020008, (IPTCTags::EditorialUpdate, false)),
            (0x02000a, (IPTCTags::Urgency, false)),
            (0x02000c, (IPTCTags::SubjectReference, false)),
            (0x02000f, (IPTCTags::Category, false)),
            (0x020014, (IPTCTags::SupplementalCategories, true)),
            (0x020016, (IPTCTags::FixtureId, true)),
            (0x020019, (IPTCTags::Keywords, true)),
            (0x02001a, (IPTCTags::ContentLocationCode, true)),
            (0x02001b, (IPTCTags::ContentLocationName, true)),
            (0x02001e, (IPTCTags::ReleaseDate, false)),
            (0x020023, (IPTCTags::ReleaseTime, false)),
            (0x020025, (IPTCTags::ExpirationDate, false)),
            (0x020026, (IPTCTags::ExpirationTime, false)),
            (0x020028, (IPTCTags::SpecialInstructions, false)),
            (0x02002a, (IPTCTags::ActionAdvised, false)),
            (0x02002d, (IPTCTags::ReferenceService, true)),
            (0x02002f, (IPTCTags::ReferenceDate, true)),
            (0x020032, (IPTCTags::ReferenceNumber, true)),
            (0x020037, (IPTCTags::DateCreated, false)),
            (0x02003c, (IPTCTags::TimeCreated, false)),
            (0x02003e, (IPTCTags::DigitalDateCreated, false)),
            (0x02003f, (IPTCTags::DigitalTimeCreated, false)),
            (0x020041, (IPTCTags::OriginatingProgram, false)),
            (0x020046, (IPTCTags::ProgramVersion, false)),
            (0x02004b, (IPTCTags::ObjectCycle, false)),
            (0x020050, (IPTCTags::ByLine, true)),
            (0x020055, (IPTCTags::ByLineTitle, true)),
            (0x02005a, (IPTCTags::City, false)),
            (0x02005c, (IPTCTags::SubLocation, false)),
            (0x02005f, (IPTCTags::ProvinceOrState, false)),
            (0x020064, (IPTCTags::CountryOrPrimaryLocationCode, false)),
            (0x020065, (IPTCTags::CountryOrPrimaryLocationName, false)),
            (0x020067, (IPTCTags::OriginalTransmissionReference, false)),
            (0x020069, (IPTCTags::Headline, false)),
            (0x02006e, (IPTCTags::Credit, false)),
            (0x020073, (IPTCTags::Source, false)),
            (0x020074, (IPTCTags::CopyrightNotice, false)),
            (0x020076, (IPTCTags::Contact, false)),
            (0x020078, (IPTCTags::Caption, false)),
            (0x020079, (IPTCTags::LocalCaption, false)),
            (0x02007a, (IPTCTags::CaptionWriter, true)),
            (0x02007d, (IPTCTags::RasterizedCaption, false)),
            (0x020082, (IPTCTags::ImageType, false)),
            (0x020083, (IPTCTags::ImageOrientation, false)),
            (0x020087, (IPTCTags::LanguageIdentifier, false)),
            (0x020096, (IPTCTags::AudioType, false)),
            (0x020097, (IPTCTags::AudioSamplingRate, false)),
            (0x020098, (IPTCTags::AudioSamplingResolution, false)),
            (0x020099, (IPTCTags::AudioDuration, false)),
            (0x02009a, (IPTCTags::AudioOutcue, false)),
            (0x0200b8, (IPTCTags::JobId, false)),
            (0x0200b9, (IPTCTags::MasterDocumentId, false)),
            (0x0200ba, (IPTCTags::ShortDocumentId, false)),
            (0x0200bb, (IPTCTags::UniqueDocumentId, false)),
            (0x0200bc, (IPTCTags::OwnerId, false)),
            (0x0200c8, (IPTCTags::ObjectPreviewFileFormat, false)),
            (0x0200c9, (IPTCTags::ObjectPreviewFileFormatVersion, false)),
            (0x0200ca, (IPTCTags::ObjectPreviewData, false)),
        ]
        .into_iter()
        .collect();

        TagsMap { map }
    }

    pub fn get(&self, tag: u32) -> Option<(IPTCTags, bool)> {
        self.map.get(&tag).copied()
    }
}
