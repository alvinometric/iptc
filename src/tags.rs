use std::collections::HashMap;
use strum_macros::Display;

#[derive(Debug, Clone, Copy, Eq, PartialEq, Hash, Display)]
pub enum IPTCTags {
    Null,
    ObjectTypeReference,
    ObjectAttributeReference,
    ObjectName,
    EditStatus,
    EditorialUpdate,
    Urgency,
    SubjectReference,
    Category,
    SupplementalCategories,
    FixtureId,
    Keywords,
    ContentLocationCode,
    ContentLocationName,
    ReleaseDate,
    ReleaseTime,
    ExpirationDate,
    ExpirationTime,
    SpecialInstructions,
    ActionAdvised,
    ReferenceService,
    ReferenceDate,
    ReferenceNumber,
    DateCreated,
    TimeCreated,
    DigitalDateCreated,
    DigitalTimeCreated,
    OriginatingProgram,
    ProgramVersion,
    ObjectCycle,
    ByLine,
    ByLineTitle,
    City,
    SubLocation,
    ProvinceOrState,
    CountryOrPrimaryLocationCode,
    CountryOrPrimaryLocationName,
    OriginalTransmissionReference,
    Headline,
    Credit,
    Source,
    CopyrightNotice,
    Contact,
    Caption,
    LocalCaption,
    CaptionWriter,
    RasterizedCaption,
    ImageType,
    ImageOrientation,
    LanguageIdentifier,
    AudioType,
    AudioSamplingRate,
    AudioSamplingResolution,
    AudioDuration,
    AudioOutcue,
    JobId,
    MasterDocumentId,
    ShortDocumentId,
    UniqueDocumentId,
    OwnerId,
    ObjectPreviewFileFormat,
    ObjectPreviewFileFormatVersion,
    ObjectPreviewData,
}

pub struct TagsMap {
    map: HashMap<u32, IPTCTags>,
}

impl TagsMap {
    pub fn new() -> Self {
        let map: HashMap<u32, IPTCTags> = [
            (3, IPTCTags::ObjectTypeReference),
            (4, IPTCTags::ObjectAttributeReference),
            (5, IPTCTags::ObjectName),
            (7, IPTCTags::EditStatus),
            (8, IPTCTags::EditorialUpdate),
            (10, IPTCTags::Urgency),
            (12, IPTCTags::SubjectReference),
            (15, IPTCTags::Category),
            (20, IPTCTags::SupplementalCategories),
            (22, IPTCTags::FixtureId),
            (25, IPTCTags::Keywords),
            (26, IPTCTags::ContentLocationCode),
            (27, IPTCTags::ContentLocationName),
            (30, IPTCTags::ReleaseDate),
            (35, IPTCTags::ReleaseTime),
            (37, IPTCTags::ExpirationDate),
            (38, IPTCTags::ExpirationTime),
            (40, IPTCTags::SpecialInstructions),
            (42, IPTCTags::ActionAdvised),
            (45, IPTCTags::ReferenceService),
            (47, IPTCTags::ReferenceDate),
            (50, IPTCTags::ReferenceNumber),
            (55, IPTCTags::DateCreated),
            (60, IPTCTags::TimeCreated),
            (62, IPTCTags::DigitalDateCreated),
            (63, IPTCTags::DigitalTimeCreated),
            (65, IPTCTags::OriginatingProgram),
            (70, IPTCTags::ProgramVersion),
            (75, IPTCTags::ObjectCycle),
            (80, IPTCTags::ByLine),
            (85, IPTCTags::ByLineTitle),
            (90, IPTCTags::City),
            (92, IPTCTags::SubLocation),
            (95, IPTCTags::ProvinceOrState),
            (100, IPTCTags::CountryOrPrimaryLocationCode),
            (101, IPTCTags::CountryOrPrimaryLocationName),
            (103, IPTCTags::OriginalTransmissionReference),
            (105, IPTCTags::Headline),
            (110, IPTCTags::Credit),
            (115, IPTCTags::Source),
            (116, IPTCTags::CopyrightNotice),
            (118, IPTCTags::Contact),
            (120, IPTCTags::Caption),
            (121, IPTCTags::LocalCaption),
            (122, IPTCTags::CaptionWriter),
            (125, IPTCTags::RasterizedCaption),
            (130, IPTCTags::ImageType),
            (131, IPTCTags::ImageOrientation),
            (135, IPTCTags::LanguageIdentifier),
            (150, IPTCTags::AudioType),
            (151, IPTCTags::AudioSamplingRate),
            (152, IPTCTags::AudioSamplingResolution),
            (153, IPTCTags::AudioDuration),
            (154, IPTCTags::AudioOutcue),
            (184, IPTCTags::JobId),
            (185, IPTCTags::MasterDocumentId),
            (186, IPTCTags::ShortDocumentId),
            (187, IPTCTags::UniqueDocumentId),
            (188, IPTCTags::OwnerId),
            (200, IPTCTags::ObjectPreviewFileFormat),
            (201, IPTCTags::ObjectPreviewFileFormatVersion),
            (202, IPTCTags::ObjectPreviewData),
        ]
        .into_iter()
        .collect();

        TagsMap { map }
    }

    pub fn get(&self, tag: u32) -> Option<IPTCTags> {
        self.map.get(&tag).copied()
    }
}
